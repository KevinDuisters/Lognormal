xaxis=axx, yaxis=axx, zaxis=axx,
aspectmode='cube'),
scene2 = list(domain=list(x=c(0.5,1),y=c(0.5,1)),
xaxis=axx, yaxis=axx, zaxis=axx,
aspectmode='cube'))
subplot(plotlist[[1]],plotlist[[2]])%>%
layout(title = "3D Subplots",
scene = list(domain=list(x=c(0,0.5),y=c(0.5,1)),
aspectmode='cube'),
scene2 = list(domain=list(x=c(0.5,1),y=c(0.5,1)),
aspectmode='cube'))
plotlist[[2]]
subplot(plotlist[[1]],plotlist[[2]],plotlist[[2]],plotlist[[2]])%>%
layout(title = "3D Subplots",
scene = list(domain=list(x=c(0,0.5),y=c(0.5,1)),
aspectmode='cube'),
scene2 = list(domain=list(x=c(0.5,1),y=c(0.5,1)),
aspectmode='cube'))
subplot(plotlist[[1]],plotlist[[2]],plotlist[[2]],plotlist[[2]],nrows=2)%>%
layout(title = "3D Subplots",
scene = list(domain=list(x=c(0,0.5),y=c(0.5,1)),
aspectmode='cube'),
scene2 = list(domain=list(x=c(0.5,1),y=c(0.5,1)),
aspectmode='cube'))
subplot(plotlist[[1]],plotlist[[2]],plotlist[[2]],plotlist[[2]],nrows=2)%>%
layout(title = "3D Subplots",
scene = list(domain=list(x=c(0,0.5),y=c(0.5,1)),
aspectmode='cube'),
scene2 = list(domain=list(x=c(0.5,1),y=c(0.5,1)),
aspectmode='cube'),
scene3 = list(domain=list(x=c(0,0.5),y=c(0,0.5)),
aspectmode='cube'),
scene4 = list(domain=list(x=c(0.5,1),y=c(0,0.5)),
aspectmode='cube'))
subplot(plotlist[[1]],plotlist[[2]],plotlist[[2]],plotlist[[2]])%>%
layout(title = "3D Subplots",
scene = list(domain=list(x=c(0,0.5),y=c(0.5,1)),
aspectmode='cube'),
scene2 = list(domain=list(x=c(0.5,1),y=c(0.5,1)),
aspectmode='cube'),
scene3 = list(domain=list(x=c(0,0.5),y=c(0,0.5)),
aspectmode='cube'),
scene4 = list(domain=list(x=c(0.5,1),y=c(0,0.5)),
aspectmode='cube'))
L1 <- L2 <- 1000
thetaseq <- seq(-10,10,length.out=L1)
omegaseq <- seq(0.001,2.5,length.out=L2)
z <- matrix(NA,L1,L2)
plotlist <- vector("list",3)
par(mfrow=c(1,1))
for(i in 1:3){
flip <- c("mode","mean","median")[i]
for(r in 1:L1){
for(c in 1:L2){
theta <- thetaseq[r]
omega <- omegaseq[c]
if(flip=="mode"){
mu <- exp(theta - omega^2) # mode
sigma <- sqrt(exp(2*theta)*(exp(2*omega^2) - 2*exp(-0.5*omega^2) + exp(-2*omega^2)   ))  # mode match
}
if(flip=="mean"){
mu <- exp(theta + 0.5*omega^2) # mean
sigma <- sqrt(exp(2*theta)*(exp(2*omega^2) - exp(omega^2)  ))  # mean match
}
if(flip=="median"){
mu <- exp(theta) # median
sigma <- sqrt(exp(2*theta)*(exp(2*omega^2) - 2*exp(omega^2/2) + 1   ))  # median match
}
z[r,c] <- min(KL.exact(theta,omega,mu,sigma),5)
}
}
#contour(x=thetaseq,y=omegaseq,z) # alternative
plotlist[[i]] <- plot_ly(x=~thetaseq,y=~omegaseq,z = ~t(z)) %>% add_surface()
}
subplot(plotlist[[1]],plotlist[[1]],plotlist[[1]],plotlist[[1]])%>%
layout(title = "3D Subplots",
scene = list(domain=list(x=c(0,0.5),y=c(0.5,1)),
title = paste("KL divergence for", flip[1], "match"),
xaxis = list(title = "theta"),yaxis = list(title = "omega"),zaxis = list(title = "KL")
),
scene2 = list(domain=list(x=c(0.5,1),y=c(0.5,1)),
title = paste("KL divergence for", flip[2], "match"),
xaxis = list(title = "theta"),yaxis = list(title = "omega"),zaxis = list(title = "KL")
),
scene3 = list(domain=list(x=c(0,0.5),y=c(0,0.5)),
title = paste("KL divergence for", flip[3], "match"),
xaxis = list(title = "theta"),yaxis = list(title = "omega"),zaxis = list(title = "KL")
),
scene4 = list(domain=list(x=c(0.5,1),y=c(0,0.5)),
title = paste("KL divergence for", flip[4], "match"),
xaxis = list(title = "theta"),yaxis = list(title = "omega"),zaxis = list(title = "KL")
))
plot(plotlist[[1]])
plot(plotlist[[1]])
plot_ly(x=~thetaseq,y=~omegaseq,z = ~t(z)) %>% add_surface()
scenelist <- lapply(1:3,function(i) paste0("scene",i))
scenelist
par(mfrow=c(1,1))
for(i in 1:3){
flip <- c("mode","mean","median")[i]
for(r in 1:L1){
for(c in 1:L2){
theta <- thetaseq[r]
omega <- omegaseq[c]
if(flip=="mode"){
mu <- exp(theta - omega^2) # mode
sigma <- sqrt(exp(2*theta)*(exp(2*omega^2) - 2*exp(-0.5*omega^2) + exp(-2*omega^2)   ))  # mode match
}
if(flip=="mean"){
mu <- exp(theta + 0.5*omega^2) # mean
sigma <- sqrt(exp(2*theta)*(exp(2*omega^2) - exp(omega^2)  ))  # mean match
}
if(flip=="median"){
mu <- exp(theta) # median
sigma <- sqrt(exp(2*theta)*(exp(2*omega^2) - 2*exp(omega^2/2) + 1   ))  # median match
}
z[r,c] <- min(KL.exact(theta,omega,mu,sigma),5)
}
}
#contour(x=thetaseq,y=omegaseq,z) # alternative
plotlist[[i]] <- plot_ly(x=~thetaseq,y=~omegaseq,z = ~t(z),scene=scenelist[[i]]) %>% add_surface()
}
plot(plotlist[[1]])
subplot(plotlist[[1]],plotlist[[1]],plotlist[[1]],plotlist[[1]])%>%
layout(title = "3D Subplots",
scene = list(domain=list(x=c(0,0.33),y=c(0,1)),
title = paste("KL divergence for", flip[1], "match"),
xaxis = list(title = "theta"),yaxis = list(title = "omega"),zaxis = list(title = "KL")
),
scene2 = list(domain=list(x=c(0.33,0.66),y=c(0,1)),
title = paste("KL divergence for", flip[2], "match"),
xaxis = list(title = "theta"),yaxis = list(title = "omega"),zaxis = list(title = "KL")
),
scene3 = list(domain=list(x=c(0.66,1),y=c(0,1)),
title = paste("KL divergence for", flip[3], "match"),
xaxis = list(title = "theta"),yaxis = list(title = "omega"),zaxis = list(title = "KL")
))
plot(plotlist[[1]])
plotlist[[1]]%>%layout(scene1=list(domain=list(x=c(0,0.33),y=c(0,1)),
title = paste("KL divergence for", flip[1], "match"),
xaxis = list(title = "theta"),yaxis = list(title = "omega"),zaxis = list(title = "KL")
))
subplot(plotlist[[1]],plotlist[[2]],plotlist[[3]])%>%
layout(title = "3D Subplots",
scene = list(domain=list(x=c(0,0.33),y=c(0,1)),
title = paste("KL divergence for", flip[1], "match"),
xaxis = list(title = "theta"),yaxis = list(title = "omega"),zaxis = list(title = "KL")
),
scene2 = list(domain=list(x=c(0.33,0.66),y=c(0,1)),
title = paste("KL divergence for", flip[2], "match"),
xaxis = list(title = "theta"),yaxis = list(title = "omega"),zaxis = list(title = "KL")
),
scene3 = list(domain=list(x=c(0.66,1),y=c(0,1)),
title = paste("KL divergence for", flip[3], "match"),
xaxis = list(title = "theta"),yaxis = list(title = "omega"),zaxis = list(title = "KL")
))
subplot(plotlist[[1]],plotlist[[2]],plotlist[[3]])%>%
layout(title = "3D Subplots",
scene = list(domain=list(x=c(0,0.3),y=c(0,1)),
title = paste("KL divergence for", flip[1], "match"),
xaxis = list(title = "theta"),yaxis = list(title = "omega"),zaxis = list(title = "KL")
),
scene2 = list(domain=list(x=c(0.35,0.65),y=c(0,1)),
title = paste("KL divergence for", flip[2], "match"),
xaxis = list(title = "theta"),yaxis = list(title = "omega"),zaxis = list(title = "KL")
),
scene3 = list(domain=list(x=c(0.7,1),y=c(0,1)),
title = paste("KL divergence for", flip[3], "match"),
xaxis = list(title = "theta"),yaxis = list(title = "omega"),zaxis = list(title = "KL")
))
L1 <- L2 <- 1000
thetaseq <- seq(-10,10,length.out=L1)
omegaseq <- seq(0.001,2.5,length.out=L2)
z <- matrix(NA,L1,L2)
plotlist <- vector("list",3)
scenelist <- lapply(1:3,function(i) paste0("scene",i))
par(mfrow=c(1,1))
for(i in 1:3){
flip <- c("mode","mean","median")[i]
for(r in 1:L1){
for(c in 1:L2){
theta <- thetaseq[r]
omega <- omegaseq[c]
if(flip=="mode"){
mu <- exp(theta - omega^2) # mode
sigma <- sqrt(exp(2*theta)*(exp(2*omega^2) - 2*exp(-0.5*omega^2) + exp(-2*omega^2)   ))  # mode match
}
if(flip=="mean"){
mu <- exp(theta + 0.5*omega^2) # mean
sigma <- sqrt(exp(2*theta)*(exp(2*omega^2) - exp(omega^2)  ))  # mean match
}
if(flip=="median"){
mu <- exp(theta) # median
sigma <- sqrt(exp(2*theta)*(exp(2*omega^2) - 2*exp(omega^2/2) + 1   ))  # median match
}
z[r,c] <- min(KL.exact(theta,omega,mu,sigma),5)
}
}
#contour(x=thetaseq,y=omegaseq,z) # alternative
plotlist[[i]] <- plot_ly(x=~thetaseq,y=~omegaseq,z = ~t(z),
scene = title = paste("KL divergence for", flip[i], "match"),
xaxis = list(title = "theta"),yaxis = list(title = "omega"),zaxis = list(title = "KL"))
%>% add_surface()
}
par(mfrow=c(1,1))
for(i in 1:3){
flip <- c("mode","mean","median")[i]
for(r in 1:L1){
for(c in 1:L2){
theta <- thetaseq[r]
omega <- omegaseq[c]
if(flip=="mode"){
mu <- exp(theta - omega^2) # mode
sigma <- sqrt(exp(2*theta)*(exp(2*omega^2) - 2*exp(-0.5*omega^2) + exp(-2*omega^2)   ))  # mode match
}
if(flip=="mean"){
mu <- exp(theta + 0.5*omega^2) # mean
sigma <- sqrt(exp(2*theta)*(exp(2*omega^2) - exp(omega^2)  ))  # mean match
}
if(flip=="median"){
mu <- exp(theta) # median
sigma <- sqrt(exp(2*theta)*(exp(2*omega^2) - 2*exp(omega^2/2) + 1   ))  # median match
}
z[r,c] <- min(KL.exact(theta,omega,mu,sigma),5)
}
}
#contour(x=thetaseq,y=omegaseq,z) # alternative
plotlist[[i]] <- plot_ly(x=~thetaseq,y=~omegaseq,z = ~t(z),
scene = list(title = paste("KL divergence for", flip[i], "match"),
xaxis = list(title = "theta"),yaxis = list(title = "omega"),zaxis = list(title = "KL")
)
)
%>% add_surface()
}
plotlist[[i]] <- plot_ly(x=~thetaseq,y=~omegaseq,z = ~t(z),
scene = list(title = paste("KL divergence for", flip[i], "match"),
xaxis = list(title = "theta"),yaxis = list(title = "omega"),zaxis = list(title = "KL")
)
)%>% add_surface()
L1 <- L2 <- 1000
thetaseq <- seq(-10,10,length.out=L1)
omegaseq <- seq(0.001,2.5,length.out=L2)
z <- matrix(NA,L1,L2)
plotlist <- vector("list",3)
scenelist <- lapply(1:3,function(i) paste0("scene",i))
par(mfrow=c(1,1))
for(i in 1:3){
flip <- c("mode","mean","median")[i]
for(r in 1:L1){
for(c in 1:L2){
theta <- thetaseq[r]
omega <- omegaseq[c]
if(flip=="mode"){
mu <- exp(theta - omega^2) # mode
sigma <- sqrt(exp(2*theta)*(exp(2*omega^2) - 2*exp(-0.5*omega^2) + exp(-2*omega^2)   ))  # mode match
}
if(flip=="mean"){
mu <- exp(theta + 0.5*omega^2) # mean
sigma <- sqrt(exp(2*theta)*(exp(2*omega^2) - exp(omega^2)  ))  # mean match
}
if(flip=="median"){
mu <- exp(theta) # median
sigma <- sqrt(exp(2*theta)*(exp(2*omega^2) - 2*exp(omega^2/2) + 1   ))  # median match
}
z[r,c] <- min(KL.exact(theta,omega,mu,sigma),5)
}
}
#contour(x=thetaseq,y=omegaseq,z) # alternative
plotlist[[i]] <- plot_ly(x=~thetaseq,y=~omegaseq,z = ~t(z),
scene = list(title = paste("KL divergence for", flip[i], "match"),
xaxis = list(title = "theta"),yaxis = list(title = "omega"),zaxis = list(title = "KL")
)
)%>% add_surface()
}
plot(plotlist[[1]])
plot_ly(x=~thetaseq,y=~omegaseq,z = ~t(z),
scene = list(title = paste("KL divergence for", flip[i], "match"),
xaxis = list(title = "theta"),yaxis = list(title = "omega"),zaxis = list(title = "KL")
)
)%>% add_surface()
plot_ly(x=~thetaseq,y=~omegaseq,z = ~t(z))
%>%layout(title = paste("KL divergence for", flip[i], "match"),xaxis = list(title = "theta"),yaxis = list(title = "omega"),zaxis = list(title = "KL"))
%>% add_surface()
plot_ly(x=~museq,y=~sigmaseq,z = ~t(z)) %>% add_surface() %>%layout(
title = paste0("KL divergence with",flip[i],"match"),
scene = list(
xaxis = list(title = "mu"),
yaxis = list(title = "sigma"),
zaxis = list(title = "KL")
))
plot_ly(x=~thetaseq,y=~omegaseq,z = ~t(z)) %>% add_surface() %>%layout(
title = paste0("KL divergence with",flip[i],"match"),
scene = list(
xaxis = list(title = "mu"),
yaxis = list(title = "sigma"),
zaxis = list(title = "KL")
))
L1 <- L2 <- 1000
thetaseq <- seq(-10,10,length.out=L1)
omegaseq <- seq(0.001,2.5,length.out=L2)
z <- matrix(NA,L1,L2)
plotlist <- vector("list",3)
scenelist <- lapply(1:3,function(i) paste0("scene",i))
par(mfrow=c(1,1))
for(i in 1:3){
flip <- c("mode","mean","median")[i]
for(r in 1:L1){
for(c in 1:L2){
theta <- thetaseq[r]
omega <- omegaseq[c]
if(flip=="mode"){
mu <- exp(theta - omega^2) # mode
sigma <- sqrt(exp(2*theta)*(exp(2*omega^2) - 2*exp(-0.5*omega^2) + exp(-2*omega^2)   ))  # mode match
}
if(flip=="mean"){
mu <- exp(theta + 0.5*omega^2) # mean
sigma <- sqrt(exp(2*theta)*(exp(2*omega^2) - exp(omega^2)  ))  # mean match
}
if(flip=="median"){
mu <- exp(theta) # median
sigma <- sqrt(exp(2*theta)*(exp(2*omega^2) - 2*exp(omega^2/2) + 1   ))  # median match
}
z[r,c] <- min(KL.exact(theta,omega,mu,sigma),5)
}
}
#contour(x=thetaseq,y=omegaseq,z) # alternative
plotlist[[i]] <- plot_ly(x=~thetaseq,y=~omegaseq,z = ~t(z)) %>% add_surface() %>%layout(
title = paste0("KL divergence with",flip[i],"match"),
scene = list(
xaxis = list(title = "mu"),
yaxis = list(title = "sigma"),
zaxis = list(title = "KL")
))
}
plot(plotlist[[1]])
plot(plotlist[[2]])
plot(plotlist[[3]])
plotlist[[i]] <- plot_ly(x=~thetaseq,y=~omegaseq,z = ~t(z)) %>% add_surface() %>%layout(
title = paste0("KL divergence with",flip,"match"),
scene = list(
xaxis = list(title = "theta"),
yaxis = list(title = "omega"),
zaxis = list(title = "KL")
))
plotlist[[1]]
plotlist[[2]]
L1 <- L2 <- 1000
thetaseq <- seq(-10,10,length.out=L1)
omegaseq <- seq(0.001,2.5,length.out=L2)
z <- matrix(NA,L1,L2)
plotlist <- vector("list",3)
scenelist <- lapply(1:3,function(i) paste0("scene",i))
par(mfrow=c(1,1))
for(i in 1:3){
flip <- c("mode","mean","median")[i]
for(r in 1:L1){
for(c in 1:L2){
theta <- thetaseq[r]
omega <- omegaseq[c]
if(flip=="mode"){
mu <- exp(theta - omega^2) # mode
sigma <- sqrt(exp(2*theta)*(exp(2*omega^2) - 2*exp(-0.5*omega^2) + exp(-2*omega^2)   ))  # mode match
}
if(flip=="mean"){
mu <- exp(theta + 0.5*omega^2) # mean
sigma <- sqrt(exp(2*theta)*(exp(2*omega^2) - exp(omega^2)  ))  # mean match
}
if(flip=="median"){
mu <- exp(theta) # median
sigma <- sqrt(exp(2*theta)*(exp(2*omega^2) - 2*exp(omega^2/2) + 1   ))  # median match
}
z[r,c] <- min(KL.exact(theta,omega,mu,sigma),5)
}
}
#contour(x=thetaseq,y=omegaseq,z) # alternative
plotlist[[i]] <- plot_ly(x=~thetaseq,y=~omegaseq,z = ~t(z)) %>% add_surface() %>%layout(
title = paste("KL divergence with",flip,"match"),
scene = list(
xaxis = list(title = "theta"),
yaxis = list(title = "omega"),
zaxis = list(title = "KL")
))
}
plotlist[[1]]
plotlist[[2]]
plotlist[[3]]
par(mfrow=c(1,2))
omega=2
for(theta in c(1,10)){
x <- seq(0,2*exp(theta),length.out=1e3)
plot(x,dlnorm(x,theta,omega),ylab="density",type="l",main=paste0("theta = ", theta, ", omega = ",omega))
mu <- exp(theta-omega^2) # mode match
sigma <- sqrt(exp(2*theta)*(exp(2*omega^2) - 2*exp(-0.5*omega^2) + exp(-2*omega^2) )) # KL min for mode match
lines(x,dnorm(x,mu,sigma),col="blue",lty=2,lwd=2)
legend("topright",bty="n",c("lognormal","normal"),col=c(1,"blue"),lty=c(1,2),lwd=c(1,2))
}
omega=0.6
for(theta in c(1,10)){
x <- seq(0,2*exp(theta),length.out=1e3)
plot(x,dlnorm(x,theta,omega),ylab="density",type="l",main=paste0("theta = ", theta, ", omega = ",omega))
mu <- exp(theta-omega^2) # mode match
sigma <- sqrt(exp(2*theta)*(exp(2*omega^2) - 2*exp(-0.5*omega^2) + exp(-2*omega^2) )) # KL min for mode match
lines(x,dnorm(x,mu,sigma),col="blue",lty=2,lwd=2)
legend("topright",bty="n",c("lognormal","normal"),col=c(1,"blue"),lty=c(1,2),lwd=c(1,2))
}
omega=0.67
for(theta in c(1,10)){
x <- seq(0,2*exp(theta),length.out=1e3)
plot(x,dlnorm(x,theta,omega),ylab="density",type="l",main=paste0("theta = ", theta, ", omega = ",omega))
mu <- exp(theta-omega^2) # mode match
sigma <- sqrt(exp(2*theta)*(exp(2*omega^2) - 2*exp(-0.5*omega^2) + exp(-2*omega^2) )) # KL min for mode match
lines(x,dnorm(x,mu,sigma),col="blue",lty=2,lwd=2)
legend("topright",bty="n",c("lognormal","normal"),col=c(1,"blue"),lty=c(1,2),lwd=c(1,2))
}
w <- seq(0,2,0.0001)
w[which(exp(0.5*w^2-ln(w)-0.5)==1.1)]
w[which(exp(0.5*w^2-log(w)-0.5)==1.1)]
w <- seq(0,2,0.0001)
w[which(exp(0.5*w^2-log(w)-0.5)==1.1)]
exp(0.5*w^2-log(w)-0.5)==1.1
exp(0.5*w^2-log(w)-0.5)
w[which(abs(exp(0.5*w^2-log(w)-0.5)-1.1))<1e-6]
w[which(abs(exp(0.5*w^2-log(w)-0.5)-1.1))<1e-3]
w[which(abs(exp(0.5*w^2-log(w)-0.5)-1.1)<1e-3)]
w[which(abs(exp(0.5*w^2-log(w)-0.5)-1.1)<1e-5)]
w[which(abs(exp(0.5*w^2-log(w)-0.5)-1.1)<1e-4)]
plotlist[[1]]
#--------------------------------------------------------------------------------------------------------------#
# lognormal project
# Jeroen Elassaiss-Schaap (a, b), Kevin Duisters (c)
# a. Leiden Academic Centre for Drug Research, Leiden University
# b. PD-Value
# c. Mathematical Institute, Leiden University
#--------------------------------------------------------------------------------------------------------------#
# load libraries
library(plotly)
# source functions (set working directory to source file location)
source("functions/KL.R")
# test
KL.proxy(theta=0.5,omega=0.2,mu=1,sigma=0.3)
KL.exact(theta=0.5,omega=0.2,mu=1,sigma=0.3)
#--------------------------------------------------------------------------------------------------------------#
# visualize
#--------------------------------------------------------------------------------------------------------------#
# An example fitting a normal curve in a lognormal with mode match in densities
par(mfrow=c(1,2))
omega=0.67
for(theta in c(1,10)){
x <- seq(0,2*exp(theta),length.out=1e3)
plot(x,dlnorm(x,theta,omega),ylab="density",type="l",main=paste0("theta = ", theta, ", omega = ",omega))
mu <- exp(theta-omega^2) # mode match
sigma <- sqrt(exp(2*theta)*(exp(2*omega^2) - 2*exp(-0.5*omega^2) + exp(-2*omega^2) )) # KL min for mode match
lines(x,dnorm(x,mu,sigma),col="blue",lty=2,lwd=2)
legend("topright",bty="n",c("lognormal","normal"),col=c(1,"blue"),lty=c(1,2),lwd=c(1,2))
}
#--------------------------------------------------------------------------------------------------------------#
w <- seq(0,2,0.0001)
w[which(abs(exp(0.5*w^2-log(w)-0.5)-1.1)<1e-4)]
# 3D KL
L1 <- 50
L2 <- 200
thetaseq <- sort(c(0,seq(-10,10,length.out=L1)))
theta.zero<-which(thetaseq==0)
omegaseq <- seq(0.001,2.5,length.out=L2)
z <- matrix(NA,L1,L2)
plotlist <- vector("list",3)
plotlist2d <- vector("list",3)
scenelist <- lapply(1:3,function(i) paste0("scene",i))
par(mfrow=c(1,1))
for(i in 1:3){
flip <- c("mode","mean","median")[i]
for(r in 1:L1){
for(c in 1:L2){
theta <- thetaseq[r]
omega <- omegaseq[c]
if(flip=="mode"){
mu <- exp(theta - omega^2) # mode
sigma <- sqrt(exp(2*theta)*(exp(2*omega^2) - 2*exp(-0.5*omega^2) + exp(-2*omega^2)   ))  # mode match
}
if(flip=="mean"){
mu <- exp(theta + 0.5*omega^2) # mean
sigma <- sqrt(exp(2*theta)*(exp(2*omega^2) - exp(omega^2)  ))  # mean match
}
if(flip=="median"){
mu <- exp(theta) # median
sigma <- sqrt(exp(2*theta)*(exp(2*omega^2) - 2*exp(omega^2/2) + 1   ))  # median match
}
z[r,c] <- min(KL.exact(theta,omega,mu,sigma),5)
}
}
#contour(x=thetaseq,y=omegaseq,z) # alternative
plotlist[[i]] <- plot_ly(x=~thetaseq,y=~omegaseq,z = ~t(z)) %>% add_surface() %>%layout(
title = paste("KL divergence with",flip,"match"),
scene = list(
xaxis = list(title = "theta"),
yaxis = list(title = "omega"),
zaxis = list(title = "KL")
))
plotlist2d[[i]] <- ggplot(data=data.frame(cbind(omegaseq,z=z[theta.zero,])),aes(omegaseq,z))  +
geom_line() +
ggtitle(paste("KL divergence with",flip,"match"))+
xlab("Omega")+ylab("KL")+
geom_hline(yintercept = 3.8/100,linetype=3)
}
plotlist2d[[1]]
plotlist2d[[2]]
plotlist2d[[3]]
library(shiny); runApp('~/Google Drive/3. LACDR/Human baseline study/HBT/HBT draft.R')
runApp('~/Google Drive/3. LACDR/Human baseline study/HBT/HBT draft.R')
runApp('~/Google Drive/3. LACDR/Human baseline study/HBT/HBT draft.R')
runApp('~/Google Drive/3. LACDR/Human baseline study/HBT/HBT draft.R')
runApp('~/Google Drive/3. LACDR/Human baseline study/HBT/HBT draft.R')
